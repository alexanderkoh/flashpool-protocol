{"$message_type":"diagnostic","message":"the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":8060,"byte_end":8081,"line_start":160,"line_end":160,"column_start":68,"column_end":89,"is_primary":true,"text":[{"text":"        ensure!(&e, !e.storage().instance().has(&s(&e,KEY_ADMIN)), FlashErr::AlreadyInit);","highlight_start":68,"highlight_end":89}],"label":"the trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22244,"byte_end":22260,"line_start":698,"line_end":698,"column_start":14,"column_end":30,"is_primary":false,"text":[],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1494,"byte_end":1523,"line_start":36,"line_end":36,"column_start":21,"column_end":50,"is_primary":false,"text":[{"text":"        if !$cond { panic_with_error!($env, $err) }","highlight_start":21,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":8001,"byte_end":8082,"line_start":160,"line_end":160,"column_start":9,"column_end":90,"is_primary":false,"text":[{"text":"        ensure!(&e, !e.storage().instance().has(&s(&e,KEY_ADMIN)), FlashErr::AlreadyInit);","highlight_start":9,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"ensure!","def_site_span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1408,"byte_end":1427,"line_start":34,"line_end":34,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"macro_rules! ensure {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic_with_error!","def_site_span":{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22164,"byte_end":22193,"line_start":696,"line_end":696,"column_start":1,"column_end":30,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&FactoryError>`\n  `soroban_sdk::Error` implements `From<&SoroswapPairError>`\n  `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<FactoryError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<SoroswapPairError>`\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `FlashErr` to implement `Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Env::panic_with_error`","code":null,"level":"note","spans":[{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs","byte_start":8597,"byte_end":8667,"line_start":276,"line_end":276,"column_start":5,"column_end":75,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mflash_campaign_manager\\src\\lib.rs:160:68\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ensure!(&e, !e.storage().instance().has(&s(&e,KEY_ADMIN)), FlashErr::AlreadyInit);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&SoroswapPairError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<SoroswapPairError>`\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `FlashErr` to implement `Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Env::panic_with_error`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mindex.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs:276:5\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":9043,"byte_end":9066,"line_start":185,"line_end":185,"column_start":44,"column_end":67,"is_primary":true,"text":[{"text":"        ensure!(&e, surplus_bps < MAX_BPS, FlashErr::BpsOutOfRange);","highlight_start":44,"highlight_end":67}],"label":"the trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22244,"byte_end":22260,"line_start":698,"line_end":698,"column_start":14,"column_end":30,"is_primary":false,"text":[],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1494,"byte_end":1523,"line_start":36,"line_end":36,"column_start":21,"column_end":50,"is_primary":false,"text":[{"text":"        if !$cond { panic_with_error!($env, $err) }","highlight_start":21,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":9008,"byte_end":9067,"line_start":185,"line_end":185,"column_start":9,"column_end":68,"is_primary":false,"text":[{"text":"        ensure!(&e, surplus_bps < MAX_BPS, FlashErr::BpsOutOfRange);","highlight_start":9,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"ensure!","def_site_span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1408,"byte_end":1427,"line_start":34,"line_end":34,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"macro_rules! ensure {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic_with_error!","def_site_span":{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22164,"byte_end":22193,"line_start":696,"line_end":696,"column_start":1,"column_end":30,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&FactoryError>`\n  `soroban_sdk::Error` implements `From<&SoroswapPairError>`\n  `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<FactoryError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<SoroswapPairError>`\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `FlashErr` to implement `Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Env::panic_with_error`","code":null,"level":"note","spans":[{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs","byte_start":8597,"byte_end":8667,"line_start":276,"line_end":276,"column_start":5,"column_end":75,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mflash_campaign_manager\\src\\lib.rs:185:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m185\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ensure!(&e, surplus_bps < MAX_BPS, FlashErr::BpsOutOfRange);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&SoroswapPairError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<SoroswapPairError>`\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `FlashErr` to implement `Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Env::panic_with_error`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mindex.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs:276:5\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":10682,"byte_end":10696,"line_start":226,"line_end":226,"column_start":36,"column_end":50,"is_primary":true,"text":[{"text":"        ensure!(&e, lp_minted > 0, FlashErr::Math);","highlight_start":36,"highlight_end":50}],"label":"the trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22244,"byte_end":22260,"line_start":698,"line_end":698,"column_start":14,"column_end":30,"is_primary":false,"text":[],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1494,"byte_end":1523,"line_start":36,"line_end":36,"column_start":21,"column_end":50,"is_primary":false,"text":[{"text":"        if !$cond { panic_with_error!($env, $err) }","highlight_start":21,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":10655,"byte_end":10697,"line_start":226,"line_end":226,"column_start":9,"column_end":51,"is_primary":false,"text":[{"text":"        ensure!(&e, lp_minted > 0, FlashErr::Math);","highlight_start":9,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"ensure!","def_site_span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1408,"byte_end":1427,"line_start":34,"line_end":34,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"macro_rules! ensure {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic_with_error!","def_site_span":{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22164,"byte_end":22193,"line_start":696,"line_end":696,"column_start":1,"column_end":30,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&FactoryError>`\n  `soroban_sdk::Error` implements `From<&SoroswapPairError>`\n  `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<FactoryError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<SoroswapPairError>`\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `FlashErr` to implement `Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Env::panic_with_error`","code":null,"level":"note","spans":[{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs","byte_start":8597,"byte_end":8667,"line_start":276,"line_end":276,"column_start":5,"column_end":75,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mflash_campaign_manager\\src\\lib.rs:226:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m226\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ensure!(&e, lp_minted > 0, FlashErr::Math);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&SoroswapPairError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<SoroswapPairError>`\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `FlashErr` to implement `Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Env::panic_with_error`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mindex.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs:276:5\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":11795,"byte_end":11809,"line_start":257,"line_end":257,"column_start":35,"column_end":49,"is_primary":true,"text":[{"text":"        ensure!(&e, token0_amt>0, FlashErr::Math);","highlight_start":35,"highlight_end":49}],"label":"the trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22244,"byte_end":22260,"line_start":698,"line_end":698,"column_start":14,"column_end":30,"is_primary":false,"text":[],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1494,"byte_end":1523,"line_start":36,"line_end":36,"column_start":21,"column_end":50,"is_primary":false,"text":[{"text":"        if !$cond { panic_with_error!($env, $err) }","highlight_start":21,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":11769,"byte_end":11810,"line_start":257,"line_end":257,"column_start":9,"column_end":50,"is_primary":false,"text":[{"text":"        ensure!(&e, token0_amt>0, FlashErr::Math);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"ensure!","def_site_span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1408,"byte_end":1427,"line_start":34,"line_end":34,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"macro_rules! ensure {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic_with_error!","def_site_span":{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22164,"byte_end":22193,"line_start":696,"line_end":696,"column_start":1,"column_end":30,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&FactoryError>`\n  `soroban_sdk::Error` implements `From<&SoroswapPairError>`\n  `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<FactoryError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<SoroswapPairError>`\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `FlashErr` to implement `Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Env::panic_with_error`","code":null,"level":"note","spans":[{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs","byte_start":8597,"byte_end":8667,"line_start":276,"line_end":276,"column_start":5,"column_end":75,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mflash_campaign_manager\\src\\lib.rs:257:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ensure!(&e, token0_amt>0, FlashErr::Math);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&SoroswapPairError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<SoroswapPairError>`\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `FlashErr` to implement `Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Env::panic_with_error`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mindex.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs:276:5\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":12771,"byte_end":12785,"line_start":280,"line_end":280,"column_start":27,"column_end":41,"is_primary":true,"text":[{"text":"        ensure!(&e, lp>0, FlashErr::Math);","highlight_start":27,"highlight_end":41}],"label":"the trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22244,"byte_end":22260,"line_start":698,"line_end":698,"column_start":14,"column_end":30,"is_primary":false,"text":[],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1494,"byte_end":1523,"line_start":36,"line_end":36,"column_start":21,"column_end":50,"is_primary":false,"text":[{"text":"        if !$cond { panic_with_error!($env, $err) }","highlight_start":21,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":12753,"byte_end":12786,"line_start":280,"line_end":280,"column_start":9,"column_end":42,"is_primary":false,"text":[{"text":"        ensure!(&e, lp>0, FlashErr::Math);","highlight_start":9,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"ensure!","def_site_span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1408,"byte_end":1427,"line_start":34,"line_end":34,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"macro_rules! ensure {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic_with_error!","def_site_span":{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22164,"byte_end":22193,"line_start":696,"line_end":696,"column_start":1,"column_end":30,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&FactoryError>`\n  `soroban_sdk::Error` implements `From<&SoroswapPairError>`\n  `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<FactoryError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<SoroswapPairError>`\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `FlashErr` to implement `Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Env::panic_with_error`","code":null,"level":"note","spans":[{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs","byte_start":8597,"byte_end":8667,"line_start":276,"line_end":276,"column_start":5,"column_end":75,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mflash_campaign_manager\\src\\lib.rs:280:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m280\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ensure!(&e, lp>0, FlashErr::Math);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&SoroswapPairError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<SoroswapPairError>`\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `FlashErr` to implement `Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Env::panic_with_error`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mindex.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs:276:5\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":13856,"byte_end":13870,"line_start":308,"line_end":308,"column_start":31,"column_end":45,"is_primary":true,"text":[{"text":"        ensure!(&e, lp_new>0, FlashErr::Math);","highlight_start":31,"highlight_end":45}],"label":"the trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22244,"byte_end":22260,"line_start":698,"line_end":698,"column_start":14,"column_end":30,"is_primary":false,"text":[],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1494,"byte_end":1523,"line_start":36,"line_end":36,"column_start":21,"column_end":50,"is_primary":false,"text":[{"text":"        if !$cond { panic_with_error!($env, $err) }","highlight_start":21,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":13834,"byte_end":13871,"line_start":308,"line_end":308,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        ensure!(&e, lp_new>0, FlashErr::Math);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"ensure!","def_site_span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1408,"byte_end":1427,"line_start":34,"line_end":34,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"macro_rules! ensure {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic_with_error!","def_site_span":{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22164,"byte_end":22193,"line_start":696,"line_end":696,"column_start":1,"column_end":30,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&FactoryError>`\n  `soroban_sdk::Error` implements `From<&SoroswapPairError>`\n  `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<FactoryError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<SoroswapPairError>`\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `FlashErr` to implement `Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Env::panic_with_error`","code":null,"level":"note","spans":[{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs","byte_start":8597,"byte_end":8667,"line_start":276,"line_end":276,"column_start":5,"column_end":75,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mflash_campaign_manager\\src\\lib.rs:308:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m308\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ensure!(&e, lp_new>0, FlashErr::Math);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&SoroswapPairError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<SoroswapPairError>`\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `FlashErr` to implement `Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Env::panic_with_error`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mindex.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs:276:5\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":14798,"byte_end":14816,"line_start":329,"line_end":329,"column_start":58,"column_end":76,"is_primary":true,"text":[{"text":"        ensure!(&e, e.ledger().sequence()>=c.end_ledger, FlashErr::TooEarly);","highlight_start":58,"highlight_end":76}],"label":"the trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22244,"byte_end":22260,"line_start":698,"line_end":698,"column_start":14,"column_end":30,"is_primary":false,"text":[],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1494,"byte_end":1523,"line_start":36,"line_end":36,"column_start":21,"column_end":50,"is_primary":false,"text":[{"text":"        if !$cond { panic_with_error!($env, $err) }","highlight_start":21,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":14749,"byte_end":14817,"line_start":329,"line_end":329,"column_start":9,"column_end":77,"is_primary":false,"text":[{"text":"        ensure!(&e, e.ledger().sequence()>=c.end_ledger, FlashErr::TooEarly);","highlight_start":9,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"ensure!","def_site_span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1408,"byte_end":1427,"line_start":34,"line_end":34,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"macro_rules! ensure {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic_with_error!","def_site_span":{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22164,"byte_end":22193,"line_start":696,"line_end":696,"column_start":1,"column_end":30,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&FactoryError>`\n  `soroban_sdk::Error` implements `From<&SoroswapPairError>`\n  `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<FactoryError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<SoroswapPairError>`\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `FlashErr` to implement `Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Env::panic_with_error`","code":null,"level":"note","spans":[{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs","byte_start":8597,"byte_end":8667,"line_start":276,"line_end":276,"column_start":5,"column_end":75,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mflash_campaign_manager\\src\\lib.rs:329:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m329\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ensure!(&e, e.ledger().sequence()>=c.end_ledger, FlashErr::TooEarly);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&SoroswapPairError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<SoroswapPairError>`\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `FlashErr` to implement `Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Env::panic_with_error`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mindex.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs:276:5\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":14972,"byte_end":14996,"line_start":333,"line_end":333,"column_start":34,"column_end":58,"is_primary":true,"text":[{"text":"        ensure!(&e, up.weight>0, FlashErr::NothingToClaim);","highlight_start":34,"highlight_end":58}],"label":"the trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22244,"byte_end":22260,"line_start":698,"line_end":698,"column_start":14,"column_end":30,"is_primary":false,"text":[],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1494,"byte_end":1523,"line_start":36,"line_end":36,"column_start":21,"column_end":50,"is_primary":false,"text":[{"text":"        if !$cond { panic_with_error!($env, $err) }","highlight_start":21,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":14947,"byte_end":14997,"line_start":333,"line_end":333,"column_start":9,"column_end":59,"is_primary":false,"text":[{"text":"        ensure!(&e, up.weight>0, FlashErr::NothingToClaim);","highlight_start":9,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"ensure!","def_site_span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1408,"byte_end":1427,"line_start":34,"line_end":34,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"macro_rules! ensure {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic_with_error!","def_site_span":{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22164,"byte_end":22193,"line_start":696,"line_end":696,"column_start":1,"column_end":30,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&FactoryError>`\n  `soroban_sdk::Error` implements `From<&SoroswapPairError>`\n  `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<FactoryError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<SoroswapPairError>`\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `FlashErr` to implement `Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Env::panic_with_error`","code":null,"level":"note","spans":[{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs","byte_start":8597,"byte_end":8667,"line_start":276,"line_end":276,"column_start":5,"column_end":75,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mflash_campaign_manager\\src\\lib.rs:333:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m333\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ensure!(&e, up.weight>0, FlashErr::NothingToClaim);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&SoroswapPairError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<SoroswapPairError>`\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `FlashErr` to implement `Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Env::panic_with_error`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mindex.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs:276:5\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `invoker` found for struct `Env` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":15633,"byte_end":15640,"line_start":350,"line_end":350,"column_start":23,"column_end":30,"is_primary":true,"text":[{"text":"        ensure!(&e, e.invoker()==get_addr(&e,KEY_ADMIN), FlashErr::NotAdmin);","highlight_start":23,"highlight_end":30}],"label":"method not found in `Env`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `invoker` found for struct `Env` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mflash_campaign_manager\\src\\lib.rs:350:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m350\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ensure!(&e, e.invoker()==get_addr(&e,KEY_ADMIN), FlashErr::NotAdmin);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Env`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":15668,"byte_end":15686,"line_start":350,"line_end":350,"column_start":58,"column_end":76,"is_primary":true,"text":[{"text":"        ensure!(&e, e.invoker()==get_addr(&e,KEY_ADMIN), FlashErr::NotAdmin);","highlight_start":58,"highlight_end":76}],"label":"the trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22244,"byte_end":22260,"line_start":698,"line_end":698,"column_start":14,"column_end":30,"is_primary":false,"text":[],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1494,"byte_end":1523,"line_start":36,"line_end":36,"column_start":21,"column_end":50,"is_primary":false,"text":[{"text":"        if !$cond { panic_with_error!($env, $err) }","highlight_start":21,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":15619,"byte_end":15687,"line_start":350,"line_end":350,"column_start":9,"column_end":77,"is_primary":false,"text":[{"text":"        ensure!(&e, e.invoker()==get_addr(&e,KEY_ADMIN), FlashErr::NotAdmin);","highlight_start":9,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"ensure!","def_site_span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1408,"byte_end":1427,"line_start":34,"line_end":34,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"macro_rules! ensure {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic_with_error!","def_site_span":{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22164,"byte_end":22193,"line_start":696,"line_end":696,"column_start":1,"column_end":30,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&FactoryError>`\n  `soroban_sdk::Error` implements `From<&SoroswapPairError>`\n  `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<FactoryError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<SoroswapPairError>`\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `FlashErr` to implement `Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Env::panic_with_error`","code":null,"level":"note","spans":[{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs","byte_start":8597,"byte_end":8667,"line_start":276,"line_end":276,"column_start":5,"column_end":75,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mflash_campaign_manager\\src\\lib.rs:350:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m350\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ensure!(&e, e.invoker()==get_addr(&e,KEY_ADMIN), FlashErr::NotAdmin);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&SoroswapPairError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<SoroswapPairError>`\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `FlashErr` to implement `Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Env::panic_with_error`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mindex.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs:276:5\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":15722,"byte_end":15745,"line_start":351,"line_end":351,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"        ensure!(&e, bps<MAX_BPS, FlashErr::BpsOutOfRange);","highlight_start":34,"highlight_end":57}],"label":"the trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22244,"byte_end":22260,"line_start":698,"line_end":698,"column_start":14,"column_end":30,"is_primary":false,"text":[],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1494,"byte_end":1523,"line_start":36,"line_end":36,"column_start":21,"column_end":50,"is_primary":false,"text":[{"text":"        if !$cond { panic_with_error!($env, $err) }","highlight_start":21,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":15697,"byte_end":15746,"line_start":351,"line_end":351,"column_start":9,"column_end":58,"is_primary":false,"text":[{"text":"        ensure!(&e, bps<MAX_BPS, FlashErr::BpsOutOfRange);","highlight_start":9,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"ensure!","def_site_span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1408,"byte_end":1427,"line_start":34,"line_end":34,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"macro_rules! ensure {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic_with_error!","def_site_span":{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22164,"byte_end":22193,"line_start":696,"line_end":696,"column_start":1,"column_end":30,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&FactoryError>`\n  `soroban_sdk::Error` implements `From<&SoroswapPairError>`\n  `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<FactoryError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<SoroswapPairError>`\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `FlashErr` to implement `Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Env::panic_with_error`","code":null,"level":"note","spans":[{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs","byte_start":8597,"byte_end":8667,"line_start":276,"line_end":276,"column_start":5,"column_end":75,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mflash_campaign_manager\\src\\lib.rs:351:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m351\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ensure!(&e, bps<MAX_BPS, FlashErr::BpsOutOfRange);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&SoroswapPairError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<SoroswapPairError>`\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `FlashErr` to implement `Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Env::panic_with_error`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mindex.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs:276:5\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `invoker` found for struct `Env` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":15856,"byte_end":15863,"line_start":355,"line_end":355,"column_start":23,"column_end":30,"is_primary":true,"text":[{"text":"        ensure!(&e, e.invoker()==get_addr(&e,KEY_ADMIN), FlashErr::NotAdmin);","highlight_start":23,"highlight_end":30}],"label":"method not found in `Env`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `invoker` found for struct `Env` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mflash_campaign_manager\\src\\lib.rs:355:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m355\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ensure!(&e, e.invoker()==get_addr(&e,KEY_ADMIN), FlashErr::NotAdmin);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Env`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":15891,"byte_end":15909,"line_start":355,"line_end":355,"column_start":58,"column_end":76,"is_primary":true,"text":[{"text":"        ensure!(&e, e.invoker()==get_addr(&e,KEY_ADMIN), FlashErr::NotAdmin);","highlight_start":58,"highlight_end":76}],"label":"the trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22244,"byte_end":22260,"line_start":698,"line_end":698,"column_start":14,"column_end":30,"is_primary":false,"text":[],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1494,"byte_end":1523,"line_start":36,"line_end":36,"column_start":21,"column_end":50,"is_primary":false,"text":[{"text":"        if !$cond { panic_with_error!($env, $err) }","highlight_start":21,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":15842,"byte_end":15910,"line_start":355,"line_end":355,"column_start":9,"column_end":77,"is_primary":false,"text":[{"text":"        ensure!(&e, e.invoker()==get_addr(&e,KEY_ADMIN), FlashErr::NotAdmin);","highlight_start":9,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"ensure!","def_site_span":{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":1408,"byte_end":1427,"line_start":34,"line_end":34,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"macro_rules! ensure {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic_with_error!","def_site_span":{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\lib.rs","byte_start":22164,"byte_end":22193,"line_start":696,"line_end":696,"column_start":1,"column_end":30,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&FactoryError>`\n  `soroban_sdk::Error` implements `From<&SoroswapPairError>`\n  `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<FactoryError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<SoroswapPairError>`\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `FlashErr` to implement `Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Env::panic_with_error`","code":null,"level":"note","spans":[{"file_name":"index.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs","byte_start":8597,"byte_end":8667,"line_start":276,"line_end":276,"column_start":5,"column_end":75,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `soroban_sdk::Error: From<FlashErr>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mflash_campaign_manager\\src\\lib.rs:355:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m355\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ensure!(&e, e.invoker()==get_addr(&e,KEY_ADMIN), FlashErr::NotAdmin);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<FlashErr>` is not implemented for `soroban_sdk::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&SoroswapPairError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<FactoryError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<SoroswapPairError>`\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `FlashErr` to implement `Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Env::panic_with_error`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mindex.crates.io-1949cf8c6b5b557f\\soroban-sdk-22.0.7\\src\\env.rs:276:5\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":3975,"byte_end":3980,"line_start":86,"line_end":86,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"fn int_sqrt(mut x: u128) -> u128 {","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_mut)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"flash_campaign_manager\\src\\lib.rs","byte_start":3975,"byte_end":3979,"line_start":86,"line_end":86,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"fn int_sqrt(mut x: u128) -> u128 {","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: variable does not need to be mutable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mflash_campaign_manager\\src\\lib.rs:86:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn int_sqrt(mut x: u128) -> u128 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: remove this `mut`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_mut)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 13 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 13 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0277, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
